import cv2,numpy as np

img=cv2.VideoCapture('C:\\Users\\user\\Videos\\12345.mp4')

roi_x_start=0;roi_x_end=0
roi_y_start=0;roi_y_end=0
event_time = 0
last_cY=0
minus=0
#---------------獲取ROI感興趣區域x,y座標---------------------------------------------------
#--------------方法一,以游標點擊獲取roi座標(先點左上用左鍵,右下用右鍵)---------------------

def OnMouseAction(event,x,y,flags,param):
      global event_time,roi_x_start,roi_x_end,roi_y_start,roi_y_end
      if event == cv2.EVENT_LBUTTONDOWN:
            print(x,',',y); roi_x_start=x; roi_y_start=y
            cv2.circle(frame,(roi_x_start,roi_y_start),1,(0,255,255))
            event_time+=1
      if event == cv2.EVENT_RBUTTONDOWN:
            print(x,',',y); roi_x_end=x; roi_y_end=y
            cv2.rectangle(frame,(roi_x_start,roi_y_start),(roi_x_end,roi_y_end),(0,255,255),2, cv2.LINE_AA)
            cv2.imshow('draw_roi',frame)
            cv2.waitKey(1000)
            event_time+=1

roi_setup=cv2.VideoCapture('C:\\Users\\user\\Videos\\12345.mp4')

if roi_setup.isOpened():
    ret,frame=roi_setup.read()
    if ret == True:
        cv2.namedWindow('draw_roi')
        cv2.setMouseCallback('draw_roi',OnMouseAction)
        while event_time < 2:
            cv2.imshow('draw_roi',frame)
            if  cv2.waitKey(1) == ord('q'):
                cv2.destroyAllWindows()
                break
roi_setup.release()
cv2.destroyAllWindows()


#-----------------方法二,輸入roi座標---------------------
'''
roi_x_start=194;  roi_x_end=612
roi_y_start=319;  roi_y_end=911
'''

#---------------------------------------------------------
threshold=35


width = int(img.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(img.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = float(img.get(5))
fourcc = cv2.VideoWriter_fourcc(*'MJPG')
out = cv2.VideoWriter('output5.avi', fourcc, fps, (width, height))


lower_red = np.array([150,43,46]);lower_red2 = np.array([0,43,46])
upper_red = np.array([180, 255, 255]);upper_red2 = np.array([10, 255, 255])

 
while(img.isOpened()):
    list1=[0];list2=[]
    cX,cY=0,0
    ret, frame = img.read()

    if ret == True:
        if minus%1==0:
              minus=int(minus)
              roi_y_start+=minus
        roi=frame[roi_y_start:roi_y_end,roi_x_start:roi_x_end]
        temple=roi
        
        ret,roi=cv2.threshold(roi, threshold, 255, cv2.THRESH_BINARY)
        #cv2.imshow('roi',roi)
        roi = cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
        hsc_red1 =cv2.inRange(roi,lower_red,upper_red)
        hsc_red2=cv2.inRange(roi,lower_red2,upper_red2)
        roi = cv2.add(hsc_red1,hsc_red2)
        roi=cv2.GaussianBlur(roi,(11,11),0)
        cv2.blur(roi, (11, 11))
        kernel = np.ones((11, 11), np.uint8)
        erosion = cv2.erode(roi, kernel, iterations = 1)
        #roi=cv2.Canny(roi,20,160)
        contours, hierarchy = cv2.findContours(roi,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)

        for c in contours:
            M = cv2.moments(c)
            if M['m10'] and M['m01'] and M['m00'] != 0:
                cX = int(M['m10'] / M['m00'])
                cY = int(M['m01'] / M['m00'])
                list2.append([cX,cY])
                list1.append(cv2.contourArea(c))
        if len(list1) != 1: 
            large_index=list1.index(max(list1))-1
            #print(max(list1))
            cX,cY=list2[large_index][0],list2[large_index][1]
            cv2.circle(temple, (cX, cY), 2, (1, 227, 254), -1)
            cv2.putText(temple, str(max(list1)),(cX, cY+5),cv2.FONT_HERSHEY_SIMPLEX,0.5,(0, 255, 255))
        else:
            large_index= -1
        cv2.drawContours(temple,contours,large_index,(255,255,0),2)
                                                                      
        frame[roi_y_start:roi_y_end,roi_x_start:roi_x_end]=temple
        
        out.write(frame)
        cv2.imshow('frame',frame)
        minus+=0.01

        if cv2.waitKey(1) == ord('q'):
              break
    else:
        break

img.release()
cv2.destroyAllWindows()
