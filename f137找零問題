#此題無無法找開之測資
#不可貪心算法
#遞迴效率過低

#貪心算法(錯誤):
  若金額為63，幣值為1 5 10 21 50，得出結果為5(50+10+1+1+1)，但正解為3(21+21+21)
a,b=map(int,input().split())
li=[]
for i in range(b):
    li.append(int(input()))
li.sort(reverse=1)
d=0
for i in li:
    c=a//i
    d+=c
    a-=c*i
print(d)

#遞迴法(窮舉):
  算出每元用所有幣值所能找的最小硬幣數
  相同問題重複計算，效率低下
def dp(c):
    li2=[]
    if c in li: 
        return 1
    for i in [h for h in li if c-h>=0]:  
        li2.append(dp(c-i)+1)
    return min(li2)
a,b=map(int,input().split())
li=[]
for i in range(b):
    li.append(int(input()))
print(dp(a))

#動態規劃:
 使用字典紀錄最優解(加了字典，效率翻倍)
 重複子結構，故將先前算出的結果儲存則可避免相同問題重複計算，提升效率
dic={}
def dp(c):
    li2=[]
    if c in li:
        return 1
    elif c in dic:
        return dic[c]
    for i in [h for h in li if c-h>=0]:
        li2.append(dp(c-i)+1)
    dic[c]=min(li2)
    return dic[c]
a,b=map(int,input().split())
li=[]
for i in range(b):
    li.append(int(input()))
print(dp(a))
