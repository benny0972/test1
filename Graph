import cv2
import numpy as np
from typing import Tuple
from math import pi, sin, cos

# Draw Line by DDA Algorithm
def line1(img: np.ndarray, p1: Tuple[int, int], p2: Tuple[int, int]):
    if abs(p1[0] - p2[0]) >= abs(p1[1] - p2[1]):
        stepNumber = abs(p1[0] - p2[0]) + 1
    else: 
        stepNumber = abs(p1[1] - p2[1]) + 1

    xStepLen = (p2[0] - p1[0]) / stepNumber
    yStepLen = (p2[1] - p1[1]) / stepNumber

    currentX = p1[0]
    currentY = p1[1]

    for i in range(stepNumber):
        currentX = currentX + xStepLen
        currentY = currentY + yStepLen
        img[999 - int(currentY)][int(currentX)] = [0, 0, 0]

# Draw Line by Linear Function
def line2(img: np.ndarray, p1: Tuple[int, int], p2: Tuple[int, int]):
    slope = (p1[1] - p2[1]) / (p1[0] - p2[0])
    shift = p1[1] - p1[0] * slope 

    for X in range(p1[0], p2[0]):
        Y = X * slope + shift
        img[999 - int(Y)][X] = [0, 0, 0]

# Draw Circle by Trigonometric Function
def circle1(img: np.ndarray, radius, center: Tuple[int, int]):
    theta = 0
    while theta <= (1 / 2) * pi:
        theta += 0.001
        X= int(radius * cos(theta)) + center[0]
        Y = 999 - int(radius * sin(theta)) - center[1]

        img[Y][X] = [0, 0, 0]
        img[2 * center[1] - Y][X] = [0, 0, 0]
        img[Y][2 * center[0] - X] = [0, 0, 0]
        img[2 * center[1] - Y][2 * center[0] - X] = [0, 0, 0]

# Draw Solid Circle
def solid_circle(img: np.ndarray, radius: int, center: Tuple[int, int]):
    theta = 0
    while theta <= (1 / 2) * pi:
        theta += 0.001
        X = int(radius * cos(theta)) + center[0]
        Y = 999 - int(radius * sin(theta)) - center[1]

        img[Y][X] = [0, 0, 0]
        img[Y][2 * center[0] - X] = [0, 0, 0]

        if img[Y + 1][X][0] != 0:
            for i in range(2 * (center[1] - Y)):
                img[Y + i][X] = [0, 0, 0]
                img[Y + i][2 * center[0] - X] = [0, 0, 0]

        theta += 0.001

# Convert 3D to 2D
def convert(c: int, z: int):
    return int(c * (1000 / z))
